import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:square_connect/square_connect.dart';

part 'payment.g.dart';

@JsonSerializable()

/// {@template payment}
/// Represents a payment processed by the Square API.
/// {@endtemplate}
class Payment extends Equatable {
  /// @macro {@macro payment}
  const Payment({
    this.id,
    this.amountMoney,
    this.appFeeMoney,
    this.approvedMoney,
    this.bankAccountDetails,
    this.billingAddress,
    this.buyerEmailAddress,
    this.capabilities,
    this.cardDetails,
    this.cashDetails,
    this.createdAt,
    this.customerId,
    this.delayAction,
    this.delayedUntil,
    this.employeeId,
    this.externalDetails,
    this.locationId,
    this.note,
    this.orderId,
    this.processingFee,
    this.receiptNumber,
    this.receiptUrl,
    this.referenceId,
    this.refundIds,
    this.refundedMoney,
    this.riskEvaluation,
    this.shippingAddress,
    this.sourceType,
    this.statementDescriptionIdentifier,
    this.status,
    this.tipMoney,
    this.totalMoney,
    this.updatedAt,
    this.versionToken,
    this.delayDuration,
  });

  /// Converts a [Map] to an [Payment]
  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);

  /// Converts a [Payment] to a [Map]
  Map<String, dynamic> toJson() => _$PaymentToJson(this);

  /// Read only A unique ID for the payment.
  final String? id;

  /// Read only A unique ID for the payment.
  final Money? amountMoney;

  /// The amount the developer is taking as a fee for facilitating the payment
  /// on behalf of the seller. This amount is specified in the smallest
  /// denomination of the applicable currency (for example, US dollar amounts
  /// are specified in cents). For more information, see Take Payments and
  /// Collect Fees.
  /// The amount cannot be more than 90% of the total_money value.
  final Money? appFeeMoney;

  /// The initial amount of money approved for this payment.
  final Money? approvedMoney;

  /// Read only Details about a bank account payment. These details are only
  /// populated if the source_type is BANK_ACCOUNT.
  final BankAccountPaymentDetails? bankAccountDetails;

  /// Read only The buyer's billing address.
  final Address? billingAddress;

  /// Read only The buyer's email address.
  final String? buyerEmailAddress;

  /// Read only Actions that can be performed on this payment:
  /// EDIT_AMOUNT_UP - The payment amount can be edited up.
  /// EDIT_AMOUNT_DOWN - The payment amount can be edited down.
  /// EDIT_TIP_AMOUNT_UP - The tip amount can be edited up.
  /// EDIT_TIP_AMOUNT_DOWN - The tip amount can be edited down.
  final List<String>? capabilities;

  /// EDIT_TIP_AMOUNT_DOWN - The tip amount can be edited down.
  final CardPaymentDetails? cardDetails;

  /// Details about a cash payment. These details are only populated if the
  /// source_type is CASH.
  final CashPaymentDetails? cashDetails;

  /// Read only The timestamp of when the payment was created, in RFC 3339
  /// format.
  /// Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
  /// UTC: 2020-01-26T02:25:34Z
  /// Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00
  final String? createdAt;

  /// Read only The Customer ID of the customer associated with the payment.
  final String? customerId;

  /// Read only The action to be applied to the payment when the delay_duration
  /// has elapsed. This field is read-only.
  /// Current values include CANCEL.
  final String? delayAction;

  /// Read only The duration of time after the payment's creation when Square
  /// automatically applies the delay_action to the payment. This automatic
  /// delay_action applies only to payments that do not reach a terminal state
  /// (COMPLETED, CANCELED, or FAILED) before the delay_duration time period.
  /// This field is specified as a time duration, in RFC 3339 format.
  /// Notes: This feature is only supported for card payments.
  /// Default:
  /// Card-present payments: "PT36H" (36 hours) from the creation time.
  /// Card-not-present payments: "P7D" (7 days) from the creation time.
  /// Example for 2 days, 12 hours, 30 minutes, and 15 seconds: P2DT12H30M15S
  final String? delayDuration;

  /// Read only The read-only timestamp of when the delay_action is
  /// automatically applied, in RFC 3339 format.
  /// Note that this field is calculated by summing the payment's delay_duration
  /// and created_at fields. The created_at field is generated by Square and
  /// might not exactly match the time on your local machine.
  /// Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
  /// UTC: 2020-01-26T02:25:34Z
  /// Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00
  final String? delayedUntil;

  /// Read only An optional ID of the employee associated with taking the
  /// payment.
  final String? employeeId;

  /// Read only Details about an external payment. The details are only
  /// populated if the source_type is EXTERNAL.
  final ExternalPaymentDetails? externalDetails;

  /// Read only The ID of the location associated with the payment.
  final String? locationId;

  /// Read only An optional note to include when creating a payment.
  final String? note;

  /// Read only The ID of the order associated with the payment.
  final String? orderId;

  /// Read only The processing fees and fee adjustments assessed by Square for
  /// this payment.
  final List<ProcessingFee>? processingFee;

  /// Read only The payment's receipt number. The field is missing if a payment
  /// is canceled.
  final String? receiptNumber;

  /// Read only The URL for the payment's receipt. The field is only populated
  /// for COMPLETED payments.
  final String? receiptUrl;

  /// Read only An optional ID that associates the payment with an entity in
  /// another system.
  final String? referenceId;

  /// Read only A list of refund_ids identifying refunds for the payment.
  final List<String>? refundIds;

  /// Read only A list of refund_ids identifying refunds for the payment.
  final Money? refundedMoney;

  /// Read only Provides information about the risk associated with the
  /// payment, as determined by Square. This field is present for payments to
  /// sellers that have opted in to receive risk evaluations.
  final RiskEvaluation? riskEvaluation;

  /// Read only The buyer's shipping address.
  final Address? shippingAddress;

  /// Read only The source type for this payment.
  /// Current values include CARD, BANK_ACCOUNT, CASH, or EXTERNAL.
  final String? sourceType;

  /// Read only Additional payment information that gets added to the customer's
  /// card statement as part of the statement description.
  /// Note that the statement_description_identifier might get truncated on the
  /// statement description to fit the required information including the Square
  /// identifier (SQ *) and the name of the seller taking the payment.
  final String? statementDescriptionIdentifier;

  /// Read only Indicates whether the payment is APPROVED, PENDING, COMPLETED,
  /// CANCELED, or FAILED.
  final String? status;

  /// The amount designated as a tip.
  /// This amount is specified in the smallest denomination of the applicable
  /// currency (for example, US dollar amounts are specified in cents). For
  /// more information, see Working with Monetary Amounts.
  final Money? tipMoney;

  /// Read only The total amount for the payment, including amount_money and
  /// tip_money. This amount is specified in the smallest denomination of the
  /// applicable currency (for example, US dollar amounts are specified in
  /// cents). For more information, see Working with Monetary Amounts.
  final Money? totalMoney;

  /// Read only The timestamp of when the payment was last updated, in RFC 3339
  /// format.
  /// Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
  /// UTC: 2020-01-26T02:25:34Z
  /// Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00
  final String? updatedAt;

  /// Used for optimistic concurrency. This opaque token identifies a specific
  /// version of the Payment object.
  final String? versionToken;

  @override
  List<Object?> get props {
    return [
      id,
      amountMoney,
      appFeeMoney,
      approvedMoney,
      bankAccountDetails,
      billingAddress,
      buyerEmailAddress,
      capabilities,
      cardDetails,
      cashDetails,
      createdAt,
      customerId,
      delayAction,
      delayedUntil,
      employeeId,
      externalDetails,
      locationId,
      note,
      orderId,
      processingFee,
      receiptNumber,
      receiptUrl,
      referenceId,
      refundIds,
      refundedMoney,
      riskEvaluation,
      shippingAddress,
      sourceType,
      statementDescriptionIdentifier,
      status,
      tipMoney,
      totalMoney,
      updatedAt,
      versionToken,
    ];
  }
}
