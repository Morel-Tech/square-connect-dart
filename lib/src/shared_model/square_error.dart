import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';

part 'square_error.g.dart';

/// {@template square_error}
/// Custom object containing a list of SquareErrors to facilitate throwing a
/// lists of errors.
/// {@endtemplate}
@JsonSerializable()
class SquareErrors extends Error with EquatableMixin {
  /// @macro {@macro square_response}
  SquareErrors({required this.errors}) : super();

  /// Converts a [Map] to an [SquareErrors]
  factory SquareErrors.fromJson(Map<String, dynamic> json) =>
      _$SquareErrorsFromJson(json);

  /// Converts a [SquareErrors] to a [Map]
  Map<String, dynamic> toJson() => _$SquareErrorsToJson(this);

  /// Any errors that occurred during the request.
  final List<SquareError> errors;

  @override
  List<Object> get props => [errors];
}

/// {@template square_error}
/// An error generated by using the Square API
/// {@endtemplate}
@JsonSerializable()
class SquareError extends Equatable {
  /// {@macro square_error}
  const SquareError({
    required this.category,
    required this.code,
    this.detail,
    this.field,
  }) : super();

  /// Converts a [Map] to an [SquareError]
  factory SquareError.fromJson(Map<String, dynamic> json) =>
      _$SquareErrorFromJson(json);

  /// Converts a [SquareError] to a [Map]
  Map<String, dynamic> toJson() => _$SquareErrorToJson(this);

  /// The high-level category for the error.
  final Category category;

  /// The specific code of the error.
  final ErrorCode code;

  /// A human-readable description of the error for debugging purposes.
  final String? detail;

  /// The name of the field provided in the original request (if any) that the
  /// error pertains to.
  final String? field;

  @override
  List<Object?> get props => [
        category,
        code,
        detail,
        field,
      ];
}

/// The high-level category for the error.
enum Category {
  /// An error occurred with the Connect API itself.
  @JsonValue('API_ERROR')
  apiError,

  /// An authentication error occurred. Most commonly, the request had a
  /// missing, malformed, or otherwise invalid Authorization header.
  @JsonValue('AUTHENTICATION_ERROR')
  authenticationError,

  /// The request was invalid. Most commonly, a required parameter was missing,
  /// or a provided parameter had an invalid value.
  @JsonValue('INVALID_REQUEST_ERROR')
  invalidRequestError,

  /// Your application reached the Connect API rate limit. Retry your request
  /// after a while.
  @JsonValue('RATE_LIMIT_ERROR')
  rateLimitError,

  /// An error occurred while processing a payment method. Most commonly, the
  /// details of the payment method were invalid (such as a card's CVV or
  /// expiration date).
  @JsonValue('PAYMENT_METHOD_ERROR')
  paymentMethodError,

  /// An error occurred while attempting to process a refund.
  @JsonValue('REFUND_ERROR')
  refundError,
}

/// The high-level category for the error.
enum ErrorCode {
  /// A general server error occurred.
  @JsonValue('INTERNAL_SERVER_ERROR')
  internalServerError,

  /// A general authorization error occurred.
  @JsonValue('UNAUTHORIZED')
  unauthorized,

  /// The provided access token has expired.
  @JsonValue('ACCESS_TOKEN_EXPIRED')
  accessTokenExpired,

  /// The provided access token has been revoked.
  @JsonValue('ACCESS_TOKEN_REVOKED')
  accessTokenRevoked,

  /// The provided client has been disabled.
  @JsonValue('CLIENT_DISABLED')
  clientDisabled,

  /// A general access error occurred.
  @JsonValue('FORBIDDEN')
  forbidden,

  /// The provided access token does not have permission to execute the
  /// requested action.
  @JsonValue('INSUFFICIENT_SCOPES')
  insufficientScopes,

  /// The calling application was disabled.
  @JsonValue('APPLICATION_DISABLED')
  applicationDisabled,

  /// The calling application was created prior to 2016-03-30 and is not
  /// compatible with v2 Square API calls.
  @JsonValue('V1_APPLICATION')
  v1Application,

  /// The calling application is using an access token created prior to
  /// 2016-03-30 and is not compatible with v2 Square API calls.
  @JsonValue('V1_ACCESS_TOKEN')
  v1AccessToken,

  /// The location provided in the API call is not enabled for credit card
  /// processing.
  @JsonValue('CARD_PROCESSING_NOT_ENABLED')
  cardProcessingNotEnabled,

  /// A general error occurred with the request.
  @JsonValue('BAD_REQUEST')
  badRequest,

  /// The request is missing a required path, query, or body parameter.
  @JsonValue('MISSING_REQUIRED_PARAMETER')
  missingRequiredParameter,

  /// The value provided in the request is the wrong type. For example, a
  /// string instead of an integer.
  @JsonValue('INCORRECT_TYPE')
  incorrectType,

  /// Formatting for the provided time value is incorrect.
  @JsonValue('INVALID_TIME')
  invalidTime,

  /// The time range provided in the request is invalid. For example, the end
  /// time is before the start time.
  @JsonValue('INVALID_TIME_RANGE')
  invalidTimeRange,

  /// The provided value is invalid. For example, including % in a phone number.
  @JsonValue('INVALID_VALUE')
  invalidValue,

  /// The pagination cursor included in the request is invalid.
  @JsonValue('INVALID_CURSOR')
  invalidCursor,

  /// The query parameters provided is invalid for the requested endpoint.
  @JsonValue('UNKNOWN_QUERY_PARAMETER')
  unknownQueryParameter,

  /// One or more of the request parameters conflict with each other.
  @JsonValue('CONFLICTING_PARAMETERS')
  conflictingParameters,

  /// The request body is not a JSON object.
  @JsonValue('EXPECTED_JSON_BODY')
  expectedJsonBody,

  /// The provided sort order is not a valid key. Currently, sort order must
  /// be ASC or DESC.
  @JsonValue('INVALID_SORT_ORDER')
  invalidSortOrder,

  /// The provided value does not match an expected regular expression.
  @JsonValue('VALUE_REGEX_MISMATCH')
  valueRegexMismatch,

  /// The provided string value is shorter than the minimum length allowed.
  @JsonValue('VALUE_TOO_SHORT')
  valueTooShort,

  /// The provided string value is longer than the maximum length allowed.
  @JsonValue('VALUE_TOO_LONG')
  valueTooLong,

  /// The provided value is less than the supported minimum.
  @JsonValue('VALUE_TOO_LOW')
  valueTooLow,

  /// The provided value is greater than the supported maximum.
  @JsonValue('VALUE_TOO_HIGH')
  valueTooHigh,

  /// The provided value has a default (empty) value such as a blank string.
  @JsonValue('VALUE_EMPTY')
  valueEmpty,

  /// The provided array has too many elements.
  @JsonValue('ARRAY_LENGTH_TOO_LONG')
  arrayLengthTooLong,

  /// The provided array has too few elements.
  @JsonValue('ARRAY_LENGTH_TOO_SHORT')
  arrayLengthTooShort,

  /// The provided array is empty.
  @JsonValue('ARRAY_EMPTY')
  arrayEmpty,

  /// The endpoint expected the provided value to be a boolean.
  @JsonValue('EXPECTED_BOOLEAN')
  expectedBoolean,

  /// The endpoint expected the provided value to be an integer.
  @JsonValue('EXPECTED_INTEGER')
  expectedInteger,

  /// The endpoint expected the provided value to be a float.
  @JsonValue('EXPECTED_FLOAT')
  expectedFloat,

  /// The endpoint expected the provided value to be a string.
  @JsonValue('EXPECTED_STRING')
  expectedString,

  /// The endpoint expected the provided value to be a JSON object.
  @JsonValue('EXPECTED_OBJECT')
  expectedObject,

  /// The endpoint expected the provided value to be an array or list.
  @JsonValue('EXPECTED_ARRAY')
  expectedArray,

  /// The endpoint expected the provided value to be a map or associative array.
  @JsonValue('EXPECTED_MAP')
  expectedMap,

  /// The endpoint expected the provided value to be an array encoded in base64.
  @JsonValue('EXPECTED_BASE64_ENCODED_BYTE_ARRAY')
  expectedBase64EncodedByteArray,

  /// One or more objects in the array does not match the array type.
  @JsonValue('INVALID_ARRAY_VALUE')
  invalidArrayValue,

  /// The provided static string is not valid for the field.
  @JsonValue('INVALID_ENUM_VALUE')
  invalidEnumValue,

  /// Invalid content type header.
  @JsonValue('INVALID_CONTENT_TYPE')
  invalidContentType,

  /// Only relevant for applications created prior to 2016-03-30. Indicates
  /// there was an error while parsing form values.
  @JsonValue('INVALID_FORM_VALUE')
  invalidFormValue,

  /// The provided customer id can't be found in the merchant's customers list.
  @JsonValue('CUSTOMER_NOT_FOUND')
  customerNotFound,

  /// A general error occurred.
  @JsonValue('ONE_INSTRUMENT_EXPECTED')
  oneInstrumentExpected,

  /// A general error occurred.
  @JsonValue('NO_FIELDS_SET')
  noFieldsSet,

  /// A general error occurred.
  @JsonValue('DEPRECATED_FIELD_SET')
  deprecatedFieldSet,

  /// A general error occurred.
  @JsonValue('RETIRED_FIELD_SET')
  retiredFieldSet,

  /// Too many entries in the map field.
  @JsonValue('TOO_MANY_MAP_ENTRIES')
  tooManyMapEntries,

  /// The length of one of the provided keys in the map is too short.
  @JsonValue('MAP_KEY_LENGTH_TOO_SHORT')
  mapKeyLengthTooShort,

  /// The length of one of the provided keys in the map is too long.
  @JsonValue('MAP_KEY_LENGTH_TOO_LONG')
  mapKeyLengthTooLong,

  /// The card issuer declined the request because the card is expired.
  @JsonValue('CARD_EXPIRED')
  cardExpired,

  /// The expiration date for the payment card is invalid. For example, it
  /// indicates a date in the past.
  @JsonValue('INVALID_EXPIRATION')
  invalidExpiration,

  /// The expiration year for the payment card is invalid. For example, it
  /// indicates a year in the past or contains invalid characters.
  @JsonValue('INVALID_EXPIRATION_YEAR')
  invalidExpirationYear,

  /// The expiration date for the payment card is invalid. For example, it
  /// contains invalid characters.
  @JsonValue('INVALID_EXPIRATION_DATE')
  invalidExpirationDate,

  /// The credit card provided is not from a supported issuer.
  @JsonValue('UNSUPPORTED_CARD_BRAND')
  unsupportedCardBrand,

  /// The entry method for the credit card (swipe, dip, tap) is not supported.
  @JsonValue('UNSUPPORTED_ENTRY_METHOD')
  unsupportedEntryMethod,

  /// The encrypted card information is invalid.
  @JsonValue('INVALID_ENCRYPTED_CARD')
  invalidEncryptedCard,

  /// The credit card cannot be validated based on the provided details.
  @JsonValue('INVALID_CARD')
  invalidCard,

  /// Square received a decline without any additional information. If the
  /// payment information seems correct, the buyer can contact their issuer to
  /// ask for more information.
  @JsonValue('GENERIC_DECLINE')
  genericDecline,

  /// The card issuer declined the request because the CVV value is invalid.
  @JsonValue('CVV_FAILURE')
  cvvFailure,

  /// The card issuer declined the request because the postal code is invalid.
  @JsonValue('ADDRESS_VERIFICATION_FAILURE')
  addressVerificationFailure,

  /// The issuer was not able to locate the account on record.
  @JsonValue('INVALID_ACCOUNT')
  invalidAccount,

  /// The currency associated with the payment is not valid for the provided
  /// funding source. For example, a gift card funded in USD cannot be used to
  /// process payments in GBP.
  @JsonValue('CURRENCY_MISMATCH')
  currencyMismatch,

  /// The funding source has insufficient funds to cover the payment.
  @JsonValue('INSUFFICIENT_FUNDS')
  insufficientFunds,

  /// The Square account does not have the permissions to accept this payment.
  /// For example, Square may limit which merchants are allowed to receive gift
  /// card payments.
  @JsonValue('INSUFFICIENT_PERMISSIONS')
  insufficientPermissions,

  /// The card issuer has declined the transaction due to restrictions on where
  /// the card can be used. For example, a gift card is limited to a single
  /// merchant.
  @JsonValue('CARDHOLDER_INSUFFICIENT_PERMISSIONS')
  cardholderInsufficientPermissions,

  /// The Square account cannot take payments in the specified region. A Square
  /// account can take payments only from the region where the account was
  /// created.
  @JsonValue('INVALID_LOCATION')
  invalidLocation,

  /// The card issuer has determined the payment amount is either too high or
  /// too low. The API returns the error code mostly for credit cards (for
  /// example, the card reached the credit limit). However, sometimes the
  /// issuer bank can indicate the error for debit or prepaid cards (for
  /// example, card has insufficient funds).
  @JsonValue('TRANSACTION_LIMIT')
  transactionLimit,

  /// The card issuer declined the request because the issuer requires voice
  /// authorization from the cardholder.
  @JsonValue('VOICE_FAILURE')
  voiceFailure,

  /// The specified card number is invalid. For example, it is of incorrect
  /// length or is incorrectly formatted.
  @JsonValue('PAN_FAILURE')
  panFailure,

  /// The card expiration date is either invalid or indicates that the card is
  /// expired.
  @JsonValue('EXPIRATION_FAILURE')
  expirationFailure,

  /// The card is not supported either in the geographic region or by the
  /// merchant category code (MCC).
  @JsonValue('CARD_NOT_SUPPORTED')
  cardNotSupported,

  /// The card issuer declined the request because the PIN is invalid.
  @JsonValue('INVALID_PIN')
  invalidPin,

  /// The postal code is incorrectly formatted.
  @JsonValue('INVALID_POSTAL_CODE')
  invalidPostalCode,

  /// The app_fee_money on a payment is too high.
  @JsonValue('INVALID_FEES')
  invalidFees,

  /// The card must be swiped, tapped, or dipped. Payments attempted by
  /// manually entering the card number are declined.
  @JsonValue('MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED')
  manuallyEnteredPaymentNotSupported,

  /// Square declined the request because the payment amount exceeded the
  /// processing limit for this merchant.

  @JsonValue('PAYMENT_LIMIT_EXCEEDED')
  paymentLimitExceeded,

  /// When a Gift Card is a payment source, you can allow taking a partial
  /// payment by adding the accept_partial_authorization parameter in the
  /// request. However, taking such a partial payment does not work if your
  /// request also includes tip_money, app_fee_money, or both. Square declines
  /// such payments and returns the GIFT_CARD_AVAILABLE_AMOUNT error. For more
  /// sinformation, see CreatePayment errors (additional information).
  @JsonValue('GIFT_CARD_AVAILABLE_AMOUNT')
  giftCardAvailableAmount,

  /// The account provided cannot carry out transactions.
  @JsonValue('ACCOUNT_UNUSABLE')
  accountUnusable,

  /// Bank account rejected or was not authorized for the payment.
  @JsonValue('BUYER_REFUSED_PAYMENT')
  buyerRefusedPayment,

  /// The application tried to update a delayed-capture payment that has
  /// expired.
  @JsonValue('DELAYED_TRANSACTION_EXPIRED')
  delayedTransactionExpired,

  /// The application tried to cancel a delayed-capture payment that was
  /// already cancelled.
  @JsonValue('DELAYED_TRANSACTION_CANCELED')
  delayedTransactionCanceled,

  /// The application tried to capture a delayed-capture payment that was
  /// already captured.
  @JsonValue('DELAYED_TRANSACTION_CAPTURED')
  delayedTransactionCaptured,

  /// The application tried to update a delayed-capture payment that failed.
  @JsonValue('DELAYED_TRANSACTION_FAILED')
  delayedTransactionFailed,

  /// The provided card token (nonce) has expired.
  @JsonValue('CARD_TOKEN_EXPIRED')
  cardTokenExpired,

  /// The provided card token (nonce) was already used to process payment.
  @JsonValue('CARD_TOKEN_USED')
  cardTokenUsed,

  /// The requested payment amount is too high for the provided payment source.
  @JsonValue('AMOUNT_TOO_HIGH')
  amountTooHigh,

  /// The API request references an unsupported instrument type/
  @JsonValue('UNSUPPORTED_INSTRUMENT_TYPE')
  unsupportedInstrumentType,

  /// The requested refund amount exceeds the amount available to refund.
  @JsonValue('REFUND_AMOUNT_INVALID')
  refundAmountInvalid,

  /// The payment already has a pending refund.
  @JsonValue('REFUND_ALREADY_PENDING')
  refundAlreadyPending,

  /// The payment is not refundable. For example, a previous refund has already
  /// been rejected and no new refunds can be accepted.
  @JsonValue('PAYMENT_NOT_REFUNDABLE')
  paymentNotRefundable,

  /// Request failed - The card issuer declined the refund.
  @JsonValue('REFUND_DECLINED')
  refundDeclined,

  /// Generic error - the provided card data is invalid.
  @JsonValue('INVALID_CARD_DATA')
  invalidCardData,

  /// The provided source id was already used to create a card.
  @JsonValue('SOURCE_USED')
  sourceUsed,

  /// The provided source id has expired.
  @JsonValue('SOURCE_EXPIRED')
  sourceExpired,

  /// The referenced loyalty program reward tier is not supported. This could
  /// happen if the reward tier created in a first party application is
  /// incompatible with the Loyalty API.
  @JsonValue('UNSUPPORTED_LOYALTY_REWARD_TIER')
  unsupportedLoyaltyRewardTier,

  /// Generic error - the given location does not matching what is expected.
  @JsonValue('LOCATION_MISMATCH')
  locationMismatch,

  /// The provided idempotency key has already been used.
  @JsonValue('IDEMPOTENCY_KEY_REUSED')
  idempotencyKeyReused,

  /// General error - the value provided was unexpected.
  @JsonValue('UNEXPECTED_VALUE')
  unexpectedValue,

  /// The API request is not supported in sandbox.
  @JsonValue('SANDBOX_NOT_SUPPORTED')
  sandboxNotSupported,

  /// The provided email address is invalid.
  @JsonValue('INVALID_EMAIL_ADDRESS')
  invalidEmailAddress,

  /// The provided phone number is invalid.
  @JsonValue('INVALID_PHONE_NUMBER')
  invalidPhoneNumber,

  /// The provided checkout URL has expired.
  @JsonValue('CHECKOUT_EXPIRED')
  checkoutExpired,

  /// Bad certificate.
  @JsonValue('BAD_CERTIFICATE')
  badCertificate,

  /// The provided Square-Version is incorrectly formatted.
  @JsonValue('INVALID_SQUARE_VERSION_FORMAT')
  invalidSquareVersionFormat,

  /// The provided Square-Version is incompatible with the requested action.
  @JsonValue('API_VERSION_INCOMPATIBLE')
  apiVersionIncompatible,

  /// The card was declined.
  @JsonValue('CARD_DECLINED')
  cardDeclined,

  /// The CVV could not be verified.
  @JsonValue('VERIFY_CVV_FAILURE')
  verifyCvvFailure,

  /// The AVS could not be verified.
  @JsonValue('VERIFY_AVS_FAILURE')
  verifyAvsFailure,

  /// The payment card was declined with a request for the card holder to call
  /// the issuer.
  @JsonValue('CARD_DECLINED_CALL_ISSUER')
  cardDeclinedCallIssuer,

  /// The payment card was declined with a request for additional verification.
  @JsonValue('CARD_DECLINED_VERIFICATION_REQUIRED')
  cardDeclinedVerificationRequired,

  /// The card has exhausted its available pin entry retries set by the card
  /// issuer. Resolving the error typically requires the card holder to contact
  /// the card issuer.
  @JsonValue('ALLOWABLE_PIN_TRIES_EXCEEDED')
  allowablePinTriesExceeded,

  /// The card issuer declined the refund.
  @JsonValue('RESERVATION_DECLINED')
  reservationDeclined,

  /// Not Found - a general error occurred.
  @JsonValue('NOT_FOUND')
  notFound,

  /// Square could not find the associated Apple Pay certificate.
  @JsonValue('APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND')
  applePaymentProcessingCertificateHashNotFound,

  /// Method Not Allowed - a general error occurred.
  @JsonValue('METHOD_NOT_ALLOWED')
  methodNotAllowed,

  /// Not Acceptable - a general error occurred.
  @JsonValue('NOT_ACCEPTABLE')
  notAcceptable,

  /// Conflict - a general error occurred.
  @JsonValue('CONFLICT')
  conflict,

  /// The target resource is no longer available and this condition is likely
  /// to be permanent.
  @JsonValue('GONE')
  gone,

  /// Request Entity Too Large - a general error occurred.
  @JsonValue('REQUEST_ENTITY_TOO_LARGE')
  requestEntityTooLarge,

  /// Unsupported Media Type - a general error occurred.
  @JsonValue('UNSUPPORTED_MEDIA_TYPE')
  unsupportedMediaType,

  /// Unprocessable Entity - a general error occurred.
  @JsonValue('UNPROCESSABLE_ENTITY')
  unprocessableEntity,

  /// Not Implemented - a general error occurred.
  @JsonValue('RATE_LIMITED')
  rateLimited,

  /// A general access error occurred.
  @JsonValue('NOT_IMPLEMENTED')
  notImplemented,

  /// Bad Gateway - a general error occurred.
  @JsonValue('BAD_GATEWAY')
  badGateway,

  /// Service Unavailable - a general error occurred.
  @JsonValue('SERVICE_UNAVAILABLE')
  serviceUnavailable,

  /// A temporary internal error occurred. You can safely retry your call using
  /// the same idempotency key.
  @JsonValue('TEMPORARY_ERROR')
  temporaryError,

  /// Gateway Timeout - a general error occurred.
  @JsonValue('GATEWAY_TIMEOUT')
  gatewayTimeout,
}
